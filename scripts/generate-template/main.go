// +build ignore

package main

import (
	"flag"
	"io/ioutil"
	"os"
	"path/filepath"
	"text/template"

	fnTemplates "github.com/elliotchance/pie/internal/pkg/function/templates"
)

func main() {
	var functionTemplatePath, output, packageName string

	flag.StringVar(&functionTemplatePath, "function-template-path", "", "path to function templates")
	flag.StringVar(&output, "output", "template.go", "output file")
	flag.StringVar(&packageName, "package", "main", "name of package that the template will belong to")
	flag.Parse()

	data := map[string]string{}

	for _, function := range fnTemplates.Functions {
		tmpl, err := ioutil.ReadFile(filepath.Join(functionTemplatePath, function.File))
		if err != nil {
			panic(err)
		}

		data[function.Name] = string(tmpl)
	}

	f, err := os.Create(output)
	if err != nil {
		panic(err)
	}
	defer f.Close()

	var packageTemplate = template.Must(template.New("").
		Parse("// Code generated by go generate; DO NOT EDIT.\n" +
			"package " + packageName + "\n" +
			"\n" +
			"var pieTemplates = map[string]string{\n" +
			"{{ range $fn, $file := . }}" +
			"\t\"{{ $fn }}\": `{{ $file }}`,\n" +
			"{{ end }}" +
			"}\n"))

	packageTemplate.Execute(f, data)
}
